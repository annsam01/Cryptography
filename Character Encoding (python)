# Ann Sam
# Character Encoding
# Implement a cipher that takes a text written in
# standard US-English and performs the following operations:
# 1. Remove all whitespace; 2. Remove all punctuation; 3. Convert
# all alphabetic chars to lower case; 4. Perform a shift of +4 (mod 26)
# on each character, and convert it to upper case; 5. Create an output
# array/list that contains the ordinal values of all characters at even
# positions (0, 2, 4, ...), followed by the ordinal values of all characters
# at odd positions (1, 3, 5, ...); 6. Print the output array in groups of five
# characters. Values should be printed in hex values. Separate values by a
# single space, and separate letter groups by newlines.

#---------------------------------#

# remove punctuation from string
def removePunctuations(string): 

    punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
  
    for char in string: 
        if char in punctuations: 
            string = string.replace(char, "") 

  # return punctuation-less string, with spaces also removed
    return string.replace(" ", "") 

cipher = " "
plainString = "Hello, World!"
shift = 4
newText = removePunctuations(plainString).casefold()

# shift +4
for char in newText:

    if char:
        char_unicode = ord(char)
        char_index = ord(char) - ord("a")

        new_index = (char_index + shift) % 26
        new_unicode = new_index + ord("a")
        new_character = chr(new_unicode)

        cipher = cipher + new_character

    else:
        cipher += char

def caesarShift(plaintext, shift):
    plaintext = plaintext.replace(" " ,"")
    return ''.join(chr(ord(char) + shift) for char in plaintext)

        
print(plainString)
print(newText)
# print cipher in upper case
print(cipher.upper())


List = ["0x4c", "0x49", "0x50", "0x50", "0x53",
        "0x41", "0x53", "0x56", "0x50", "0x48"]
odd_hexValues = [] 
even_hexValues = []

for n in range(0, len(List),5):
    
    if n % 2: 
        odd_hexValues.append(List[n]) 
    else : 
        even_hexValues.append(List[n])

    print(List[n:n+5])
  
newList =  even_hexValues + odd_hexValues
